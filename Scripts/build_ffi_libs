#!/usr/bin/env bash

#  Created by Marko Justinek on 27/8/24.
#  Copyright © 2024 Marko Justinek. All rights reserved.
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
#  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -euo pipefail

SOURCE_DIR="${BASH_SOURCE[0]%/*}"

########################
# Pre-requisite(s):
# 	1. ``libpact_ffi.version`` file exists in the "${WORKSPACE}/PactSwiftMockServer" folder.
#######################

WORKSPACE="${GITHUB_WORKSPACE:-$PWD}"
PACTSWIFTMOCKSERVER_DIR="$WORKSPACE/PactSwiftMockServer"
LIBPACT_FFI_DIR="${PACTSWIFTMOCKSERVER_DIR}/pact-reference/rust/pact_ffi"
LIBPACT_FFI_VERSION=$(awk 'NR==1 {print; exit}' libpact_ffi.version)

COMMIT_SHA=${1:-}

# "import"
source "$SOURCE_DIR/utils.sh"
source "$SOURCE_DIR/rust_config.sh"

#######################
# Pre-requisite       #
#######################

# Check whether this script is being run in the right folder
if [ ! -d "$PWD/PactSwiftMockServer.xcodeproj" ]
then
	echo "🚨  Run this from the same folder where your 'PactSwiftMockServer.xcodeproj' is."
	echo "⚠️  You are runing it in '$PWD'."
	exit 1
fi

# Check Tooling is available
echo "👮‍♀️  Checking if Rust is installed..."
if which cargo >/dev/null; then
	echo "👍  cargo installed"
elif command -v ~/.cargo/bin/cargo &> /dev/null; then
	echo "👍  cargo installed in ~/.cargo/bin/"
else
	echo "🚨  Rust/Cargo not installed"
	echo -e "ERROR: 'cargo' is a required dependency.\nInstall Rust using either homebrew or follow instructions at https://www.rust-lang.org/tools/install"
 	exit 1
fi

# Git checkout the specific commit given SHA
if [ -v "$COMMIT_SHA" ]; then
  echo "ℹ️  No commit SHA provided. Using latest commit..."
  git log -1 --pretty=format:"%H %s"
else
  echo "ℹ️  Checking out commit with SHA: $COMMIT_SHA"
  git checkout "$COMMIT_SHA"
fi

####################################
# Rust codebase prep               #
####################################

# Update pact-reference submodule
echo "🔃 Updating pact-reference submodule"
execute_command "git submodule update --init"

echo "ℹ️  Changing location to ${LIBPACT_FFI_DIR}"
execute_command "cd $LIBPACT_FFI_DIR"

echo "ℹ️  Checking out ${LIBPACT_FFI_VERSION}"
execute_command "git fetch --all --tags"
execute_command "git checkout tags/$LIBPACT_FFI_VERSION"

###############################
# Setup rust environment      #
###############################

# Set the rust toolchain (prepare_rust_tools.sh)
# pact-reference/rust/pact_ffi/CMakeLists.txt uses nightly!
rustup_install_nightly

# Set default rust toolchain for current machine's architecture
rustup_set_default_toolchain

# Add the required triples for supported architectures
rustup_add_targets

##############################################
# Build libpact_ffi binaries                 #
##############################################

# Set min deployment targets avoiding 'ld: warning's:
# avoiding "Object file (__/libpact_ffi.a[arm64][232](b0401a448be314bb-zdict.o)) was built for newer 'macOS' version (14.2) than being linked (12.0)"
unset MACOSX_DEPLOYMENT_TARGET
export MACOSX_DEPLOYMENT_TARGET=12.0

# avoiding "Object file (__/libpact_ffi.a[arm64][232](b0401a448be314bb-zdict.o)) was built for newer 'iOS-simulator' version (17.2) than being linked (13.0)"
unset IPHONEOS_DEPLOYMENT_TARGET
export IPHONEOS_DEPLOYMENT_TARGET=13.0

# Build for x86_64 architectures
echo "🏗  Building libpact_ffi.a for x86_64 iOS Simulator"
execute_command "cargo build --target=x86_64-apple-ios --release"

echo "🏗  Building libpact_ffi.a for x86_64 Darwin"
execute_command "cargo build --target=x86_64-apple-darwin --release"

# Build for arm64 architectures
echo "🏗  Building libpact_ffi.a for arm64 iOS Simulator"
execute_command "cargo build --target aarch64-apple-ios-sim --release"

echo "🏗  Building libpact_ffi.a for arm64 Darwin"
execute_command "cargo build --target=aarch64-apple-darwin --release"

echo "🏗  Building libpact_ffi.a for arm64 iOS device"
execute_command "cargo build --target=aarch64-apple-ios --release"

echo "✅  libpact_ffi.a binaries built"

echo "🏗  Building pact_ffi.h..."
execute_command "mkdir -p build && cd build"

execute_command "cmake .. && cmake --build ."
execute_command "cbindgen .. -o ../include/pact_ffi.h"

execute_command "cd .."

#######################
# Pact Mock Server    #
#######################

# Copy the compiled binaries into PactSwiftMockServer project
echo "🏗  Copying binaries from ${PWD} to ${PACTSWIFTMOCKSERVER_DIR}/Resources"

# Copy binary for an iOS device
echo "🚚  Copying arm64-ios (iOS device) binary..."
execute_command "cp ../target/aarch64-apple-ios/release/libpact_ffi.a $PACTSWIFTMOCKSERVER_DIR/Resources/iOS-device/libpact_ffi.a"
echo "👍  Copied arm64-ios binary."

# Create a fat binary for iOS Simulators and copy to workspace
echo "🚚  Creating a fat binary for iOS Simulator (x86_64 and arm64)..."
execute_command "lipo -create \
  ../target/x86_64-apple-ios/release/libpact_ffi.a \
  ../target/aarch64-apple-ios-sim/release/libpact_ffi.a \
  -output $PACTSWIFTMOCKSERVER_DIR/Resources/iOS-simulator/libpact_ffi.a"
echo "👍  Copied x86_64-ios and arm64-ios-sim fattie."

# Create a fat darwin binary and copy to workspace
echo "🚚  Copying x86_64-darwin and arm64-darwin into a fat binary..."
execute_command "lipo -create \
  ../target/x86_64-apple-darwin/release/libpact_ffi.a \
  ../target/aarch64-apple-darwin/release/libpact_ffi.a \
  -output $PACTSWIFTMOCKSERVER_DIR/Resources/x86_64-darwin/libpact_ffi.a"
echo "👍  Copied x86_64-darwin and arm64-darwin fattie."

echo "🏗  Copying pact_ffi.h from ${PWD}/include to ${PACTSWIFTMOCKSERVER_DIR}/Sources"
execute_command "cp include/pact_ffi.h ${PACTSWIFTMOCKSERVER_DIR}/Sources"

#######################
# Cleanup             #
#######################

echo "🎉  All done!"
