#!/usr/bin/env bash

#  Created by Marko Justinek on 27/8/24.
#  Copyright ¬© 2024 Marko Justinek. All rights reserved.
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
#  SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
#  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -euo pipefail

SOURCE_DIR="${BASH_SOURCE[0]%/*}"

# "import"
source "$SOURCE_DIR/utils.sh"
source "$SOURCE_DIR/config.sh"

# Properties
COMMIT_SHA=${1:-}
TMP_DIR="./.tmp/build-xcframework"

# Only use xcbeautify if it can be found in path.
XCBEAUTIFY=$(command -v xcbeautify || command -v cat)

########################
# Pre-build checks     #
########################

# Check for Xcode version used to generate the XCFramework. Should be at least 12.x.
# Otherwise a _concurrency fatal issue will be raised if PactSwiftMockSerer is
# used in a project built with Xcode 12.x
echo "‚ö†Ô∏è Checking for the right Xcode tools..."
check_xcode

# Setup

# Git checkout the specific commit given SHA
if [ -v "$COMMIT_SHA" ]; then
  echo "‚ÑπÔ∏è  No commit SHA provided. Using latest commit..."
  git log -1 --pretty=format:"%H %s"
else
  echo "‚ÑπÔ∏è  Checking out commit with SHA: $COMMIT_SHA"
  git checkout "$COMMIT_SHA"
fi

# Check if we're in the right folder
echo "‚ÑπÔ∏è  Looking for ${PRODUCT_NAME}.xcodeproj"
if [ ! -d "${PRODUCT_NAME}.xcodeproj" ]; then
  echo "üö® Run this in the same folder as \"${PRODUCT_NAME}.xcodeproj\"."
  exit 1
else
  echo "üëç All seems as it should..."
fi

# Clean-up the existing XCFramework
if [ -d "./${PRODUCT_NAME}.xcframework" ]; then
  echo "‚ÑπÔ∏è  Removing existing XCFramework"
  rm -fr "./${PRODUCT_NAME}.xcframework"
  echo "üëç  Removed existing ${PRODUCT_NAME}.xcframework"
fi

# Preapre the temp folder
echo "‚ÑπÔ∏è  Preparing '${TMP_DIR}' folder"
mkdir -p $TMP_DIR
rm -fr $TMP_DIR

# iOS

echo "üèó  Building for iOS..."
xcodebuild archive \
  -sdk iphoneos IPHONEOS_DEPLOYMENT_TARGET=${IPHONEOS_DEPLOYMENT_TARGET} \
  -arch arm64 \
  -scheme "${PRODUCT_NAME}-iphoneos" \
  -archivePath "${TMP_DIR}/iphoneos/${PRODUCT_NAME}.xcarchive" \
  BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
  SKIP_INSTALL=NO | ${XCBEAUTIFY}
echo "üëç  Framework for arm64 device built"

echo "üèó  Building for iOS Simulator..."
xcodebuild archive \
  -sdk iphonesimulator IPHONEOS_DEPLOYMENT_TARGET=${IPHONEOS_DEPLOYMENT_TARGET} \
  -arch x86_64 -arch arm64 \
  -scheme "${PRODUCT_NAME}-iOS" \
  -archivePath "${TMP_DIR}/iphonesimulator/${PRODUCT_NAME}.xcarchive" \
  BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
  SKIP_INSTALL=NO | ${XCBEAUTIFY}
echo "üëç  Framework for iOS Simulator built for x86_64 and arm64 architecture"

# macOS

echo "üèó  Building for macOS..."
xcodebuild archive \
  -sdk macosx MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} \
  -arch x86_64 -arch arm64 \
  -scheme "${PRODUCT_NAME}-macOS" \
  -archivePath "${TMP_DIR}/macos/${PRODUCT_NAME}.xcarchive" \
  BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
  SKIP_INSTALL=NO | ${XCBEAUTIFY}
echo "üëç  Framework for macOS built for x86_64 and arm64 architectures"

# XCFramework

echo "üèó  Building XCFramework..."
xcodebuild -create-xcframework -output "./$PRODUCT_NAME.xcframework" \
  -framework "$TMP_DIR/iphoneos/$PRODUCT_NAME.xcarchive/Products/Library/Frameworks/$PRODUCT_NAME.framework" \
  -framework "$TMP_DIR/iphonesimulator/$PRODUCT_NAME.xcarchive/Products/Library/Frameworks/$PRODUCT_NAME.framework" \
  -framework "$TMP_DIR/macos/$PRODUCT_NAME.xcarchive/Products/Library/Frameworks/$PRODUCT_NAME.framework"
echo "üëç  XCFramework built"

# Cleanup
echo "‚ÑπÔ∏è  Removing '$TMP_DIR' folder..."
rm -fr $TMP_DIR

echo "üéâ Done!"
